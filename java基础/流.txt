1.流的概念：内存与存储设备之间传输数据的通道

2.流的分类：
	(1).按照方向：输入流(将存储设备中的内容读入到内存中)和输出流(反之)
	(2).按照单位：字节流(以字节为单位，可读写所有数据)和字符流(以字符为单位，只能读写文本数据)
	(3).按照功能：节点流(具有实际传输数据的读写功能)和过滤流(在节点流基础上增强功能)

3.字节流：
	超类：InputStream和OutputStream
	文件字节流：FileInputStream(主要方法read())和FileOutputStream(主要方法write())
	字节缓冲流：BufferedInputStream(主要方法read())和BufferedOutputStream(主要方法write()和flush()方法)(搭配文件字节流使用)：提高io效率，减少硬盘访问次数，数据存储在缓冲区，flush是将缓冲区内容写入文件，可以直接close
	对象流：ObjectInputStream(readObject()从流中读取一个对象)和ObjectOutputStream(writeObject()向流写入一个对象)(搭配文件字节流使用)：增强缓冲区功能、增强了读写8种基本数据类型和字符串功能、增加了读写对象功能

4.字符流：
	超类：Reader(字符输入流)和Writer(字符输出流)
	文件字符流：FileReader(主要方法read(char[] c))和FileWriter(主要方法write(String str))
	字符缓冲流：BufferedReader和BufferedWriter：高效读写，支持输入换行符，可一次写一行、读一行(搭配文件字符流使用)
	打印流：PrintWriter：封装了print()和println()方法，支持写后换行，支持数据原样打印

5.转换流(桥转换流)：InputStreamReader和OutputStreamWriter：前者将字节流转换为字符流，后者反之，可设置字符编码格式

6.序列化、反序列化：使用流传输对象的过程，必须实现Serializable
	serialVersionUID：序列化版本号ID，保证序列化和反序列化后同一个类
	使用transient修饰属性则该属性不能序列化
	static、final修饰的不可序列化

7.File类
	概念：可以代表物理盘符中的一个文件或者文件夹
	方法：略

8.FileFilter接口(实现accept方法)：当调用File类中的listFiles()方法时，支持传入该接口实现类，对获取文件进行过滤，只有满足条件的文件才可出现在listFiles()的返回值中

9.工具类推荐：
	Commons IO是针对IO流功能开发的工具类库
