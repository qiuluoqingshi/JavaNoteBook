1.集合
	概念：对象的容器，定义了对多个对象进行操作的常用方法，实现数组的功能
	集合和数组的区别：数组长度固定，集合长度不固定，数组可以存储基本类型和引用类型，集合只能存储引用类型

2.Collection接口
	概念：是所有集合接口或集合类的基类
	特点：代表一组任意类型的对象，(api描述)部分有序、有下标、元素可重复，部分无序、无下标、不能重复
	主要有两个子接口：List和Set

	List接口
		特点：有序、有下标、元素可重复
		主要子类：ArrayList(底层是数组)、LinkedList(底层是链表)、Vector

	ArrayList
		底层是使用数组去实现的，使用顺序存储结构
		特点：查询快，增删慢，运行效率快，线程不安全
		源码中：
			默认数组(容量)大小是DEFAULT_CAPACITY=10(未添加任何元素时，实际容量为0)
			存放数据的数组是elementData[] = {}
			实际的元素个数是size
	LinkedList
		底层是双向链表，使用链式存储结构
		特点：查询慢，增删快

	Vector
		底层是使用数组去实现的，使用顺序存储结构
		特点：查询快，增删慢，运行效率慢，线程安全

3.Set接口

	特点：无序、无下标、元素不可重复
	主要子类：HashSet
	主要子接口：SortedSet(拥有子类：TreeSet)

	HashSet
		底层是以哈希表(内置HashMap)实现的，存储结构有数组+链表+红黑树
		重点：
			基于HashCode(哈希码)计算元素存放位置，当新增元素时先调用hashCode()方法判断，哈希码不同则加入，哈希码相同时，会调用equals()方法进行确认元素是否相同，相同则拒绝加入，不同则加入
		注意：
			默认情况下Obejct中的hashcode()是调用底层的，返回的是一个该对象的内存地址，因此实际上每new一个对象的哈希码都是不一样的，即使对象内容一致，哈希码也是不一样的，因此必要情况下需要重写元素对象类中的hashcode()方法
			默认情况下Obejct中的equals()是比较对象的地址来判断是不是同一个对象，因此如果对象地址一致且对象内容一致，也会不判定不一样，从而成功添加，因此必要情况下需要重写元素对象类中的equals()方法即可

	TreeSet
		底层存储结构是使用红黑树(是一个二叉查找树)
		重点：
			基于排列顺序实现元素不重复，实现了SortedSet接口，对集合元素自动进行排序
			创建TreeSet是在构造器中实现Comparator接口，通过compare()方法确定是否为重复元素；否则元素对象类型必须实现Comparable接口，通过CompareTo()方法确定是否为重复元素

4.Map接口
	特点：用于存储任意键值对，无序、无下标、键不可重复，值可重复
	主要子类：HashMap
	主要子接口：SortedMap(子类：TreeMap)
	
	HashMap
		底层是使用哈希表实现的，存储结构为数组+链表+红黑树
		特点：线程不安全，运行效率快，允许null作为键或值
		默认初始容量DEFAULT_INITIAL_CAPACITY=16，当当前容量到达最大容量的75%则开始扩容为原来的两倍(当刚创建时，内部数组table=null，size=0)
		解决键为对象时的重复问题：重写键对象中的hashCode()和equals()方法

	LinkedHashMap

	HashTable
		主要子类：Properities
		特点：线程安全，运行速率慢，不允许null作为键或值

	Properities
		特点：键值都必须是String，通常用于配置文件的读取

	TreeMap
		底层存储结构是使用红黑树(是一个二叉查找树)
		重点：
			创建TreeMap是在构造器中实现Comparator接口，通过compare()方法确定是否为重复元素；否则元素对象类型必须实现Comparable接口，通过CompareTo()方法确定是否为重复元素

5.Collections集合工具类
	概念：集合工具类，定义了除存取外的集合常用方法