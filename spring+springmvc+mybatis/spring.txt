1.什么是spring
	是分层的JavaSE/EE应用full-stack轻量级开源框架

2.spring的两大核心：IOC(控制反转，即类把对象生成的权力交给框架来实现，自身不在拥有创建相应的对象的权力)、AOP(面向切面编程)
	IOC的作用：削减计算机程序之间的耦合（解除代码中的依赖关系）
3.spring的优势
	方便解耦，简化开发
	AOP编程的支持
	声明式事务的支持
	方便程序的测试
	方便集成各自优秀框架
	降低JavaEE API的使用难度

4.spring体系结构

5.程序的耦合以及解耦
	耦合；程序间的依赖关系，包括：类之间的依赖，方法间的依赖
	解耦：降低程序间的依赖关系
	解耦思路：
		第一步：通过读取配置文件(xml或者properties)来获取要创建的全限定类名
		第二步：通过获取到的全限定类名后使用反射创建该对象，避免使用new关键字
	实际开发中，应该做到编译期不依赖，运行时才依赖
	
6.工厂模式解耦
	使用工厂模式解耦，编译期一般不会出现错误，而是在运行期发生错误

8.依赖注入
        	依赖注入：
            		Dependency Injection
        	IOC的作用：
            		降低程序间的耦合（依赖关系）
        	依赖关系的管理：
            		以后都交给spring来维护
        		在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        	依赖关系的维护：
            		就称之为依赖注入。
         	依赖注入：
            		能注入的数据：有三类
                		基本类型和String
                		其他bean类型（在配置文件中或者注解配置过的bean）
                		复杂类型/集合类型
             		注入的方式：有三种
                		第一种：使用构造函数提供
                		第二种：使用set方法提供
                		第三种：使用注解提供（明天的内容）



    	<!--构造函数注入：
        		使用的标签:constructor-arg
        		标签出现的位置：bean标签的内部
        		标签中的属性
            			type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            			index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
           	 		name：用于指定给构造函数中指定名称的参数赋值                                        常用的
            =============以上三个用于指定给构造函数中哪个参数赋值===============================
            			value：用于提供基本类型和String类型的数据
            			ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象

        		优势：
            			在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        		弊端：
            			改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    	-->
    		<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        			<constructor-arg name="name" value="泰斯特"></constructor-arg>
        			<constructor-arg name="birthday" ref="now"></constructor-arg>
    		</bean>

    		<!-- 配置一个日期对象 -->
    		<bean id="now" class="java.util.Date"></bean>



    	<!-- set方法注入                更常用的方式
        		涉及的标签：property
        		出现的位置：bean标签的内部
        		标签的属性
           		name：用于指定注入时所调用的set方法名称
            		value：用于提供基本类型和String类型的数据
            		ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象
        		优势：
            			创建对象时没有明确的限制，可以直接使用默认构造函数
        		弊端：
            			如果有某个成员必须有值，则获取对象是有可能set方法没有执行。
    	-->
    	<bean id="accountService2" class="com.itheima.service.impl.AccountServiceImpl2">
        		<property name="name" value="TEST" ></property>
        		<property name="age" value="21"></property>
        		<property name="birthday" ref="now"></property>
    	</bean>

    	<!-- 复杂类型的注入/集合类型的注入
        		用于给List结构集合注入的标签：
            			list array set
        		用于个Map结构集合注入的标签:
            			map  props
        		结构相同，标签可以互换
    	-->
    <bean id="accountService3" class="com.itheima.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>

        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="mySet">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>

        <property name="myMap">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>

        <property name="myProps">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>BBB</value>
                </entry>
            </map>
        </property>
    </bean>




9.Bean
	意义：在计算机英语中，可重用组件的含义
	javaBean：不等于实体类，意义是用Java语言编写的可重用组件
	Java中将创建对象的权力交给spring来实现，使用IOC概念：
	获取spring的Ioc核心容器，并根据id获取对象
     	*
     	*      ApplicationContext的三个常用实现类：
     	*      ClassPathXmlApplicationContext：它可以加载类路径下的配置文件，要求配置文件必须在类路径下。不在的话，加载不了。(更常用)
     	*      FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件(必须有访问权限）
     	*      AnnotationConfigApplicationContext：它是用于读取注解创建容器的，是明天的内容。
	*
     	*      核心容器的两个接口引发出的问题：
     	*      ApplicationContext:      单例对象适用              采用此接口
     	*      它在构建核心容器时，创建对象采取的策略是采用立即加载的方式。也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。
     	*      BeanFactory:                多例对象适用
     	*      它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式。也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象。

10.spring对Bean的管理细节
	创建Bean的三种方式：
		第一种，使用默认构造函数创建，即在spring的配置文件中使用Bean标签，配以id和class属性之后，且没有其他属性和标签时，采用默认构造函数创建Bean对象，如果类中没有默认构造函数，则无法创建对象：<bean id="" class=""></bean>

		第二种，使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）：
    		<bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
    		<bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>


		第三种方式：使用静态工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)：
    		<bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>


	bean的作用范围调整
        		bean标签的scope属性：
            		作用：用于指定bean的作用范围
            		取值： 常用的就是单例的和多例的
                		singleton：单例的（默认值）
                		prototype：多例的
                		request：作用于web应用的请求范围
                		session：作用于web应用的会话范围
                		global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session
    			<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype"></bean>


	bean对象的生命周期
            	单例对象
                	出生：当容器创建时对象出生
                	活着：只要容器还在，对象一直活着
                	死亡：容器销毁，对象消亡
                	总结：单例对象的生命周期和容器相同
            	多例对象
                	出生：当我们使用对象时spring框架为我们创建
                	活着：对象只要是在使用过程中就一直活着。
                	死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
    		<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype" init-method="init" destroy-method="destroy"></bean>

----------------------------------（以上是spring中基于xml的IOC入门）-------------------------------------------

11.spring中基于注解的IOC入门
用于创建对象的
 *      他们的作用就和在XML配置文件中编写一个<bean>标签实现的功能是一样的
 *      @Component:
 *          作用：用于把当前类对象存入spring容器中
 *          属性：
 *              value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。
 *      @Controller：一般用在表现层
 *      @Service：一般用在业务层
 *      @Repository：一般用在持久层
 *      以上三个注解他们的作用和属性与Component是一模一样。
 *      他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰
 *
 *
 * 用于注入数据的
 *      他们的作用就和在xml配置文件中的bean标签中写一个<property>标签的作用是一样的
 *      @Autowired:
 *          作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功
 *                如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。
 *                如果Ioc容器中有多个类型匹配时，则报错。
 *          出现位置：
 *              可以是变量上，也可以是方法上
 *          细节：
 *              在使用注解注入时，set方法就不是必须的了。
 *      @Qualifier:
 *          作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以（稍后我们讲）
 *          属性：
 *              value：用于指定注入bean的id。
 *      @Resource
 *          作用：直接按照bean的id注入。它可以独立使用
 *          属性：
 *              name：用于指定bean的id。
 *      以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。
 *      另外，集合类型的注入只能通过XML来实现。
 *
 *      @Value
 *          作用：用于注入基本类型和String类型的数据
 *          属性：
 *              value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）
 *                      SpEL的写法：${表达式}
 *
 * 用于改变作用范围的
 *      他们的作用就和在bean标签中使用scope属性实现的功能是一样的
 *      @Scope
 *          作用：用于指定bean的作用范围
 *          属性：
 *              value：指定范围的取值。常用取值：singleton prototype

12.使用Config配置类实现bean.xml功能：
/**
 * SPringl中使得一个类和和bean.xml作用一样的注解：
 * 1.用于类上面的注解：
 * @Configuration：
 *      作用：指定当前类是一个配置类
 * @ComponentScan：
 *      作用：用于通过注解指定spring在创建容器时要扫描的包，与bean.xml中的
 *      <context:component-scan base-package=""></context:component-scan>作用一样
 *      属性：value和basePackages作用一样，都是用于指定创建容器时要扫描的包
 * 2.用于类中方法的注解(使得该方法和xml中的<bean></>作用一样)：
 * @Bean：
 *      作用：将该方法的返回值作为bean对象存入spring的ioc容器中
 *      属性：name 用于指定bean的id，默认位当前方法名称
 * @Scope：
 *      作用：改变方法中返回对象的生命周期(即单例或多例等)
 * @Import：
 *      作用：导入其他配置类到当前配置类
 *      属性：value 指定配置类的字节码，有该注解为父配置类，其他类为子配置类
 * @PropertySource：
 *      作用：用于指定所使用的properties文件
 *      属性：value 指定properties文件的名称和路径：
 *              格式：有包：classpath(表示类路径)：xx/xx/xx.properties，没包：classpath(表示类路径)：xx.properties
 */

13.使用junit作测试

14.为了保持一个方法中事务的一致性：需要使用ThreadLocal对象把Connection与当前对应线程绑定，从而使得一个线程中只有一个能控制事务的对象。
	事务的控制应该在业务层，而不是在持久层。

15.动态代理：
	特点：字节码随用随创建，随用随加载
	作用：不修改源码的基础上对方法增强
	分类：
		基于接口的动态代理：
			涉及的类：Proxy，提供者：JDK官方
			创建代理对象：使用Proxy类中的newProxyInstabce方法
			创建代理对象的要求：被代理类最少实现一个接口，如果没有就不能使用
			newProxyInstabce方法的参数：
				类加载器：用于加载代理对象字节码，和被代理对象使用相同的类加载器，固定写法：类对象.getClass().getClassLoader()
				字节码数组：用于让代理对象和被代理对象有相同的方法，固定写法：类对象.getClass().getInterfaces()
				接口：用于提供增强的代码，是写如何代理，一般都是写一个该接口的实现类，一般为匿名内部类，但是不是必须的。写法：new InvocationHandler(){@Override public Object invoke(Object proxy, Method method, Object[] args){}}
				invoke方法的作用：执行被代理对象的任何接口方法都会经过该方法，具有拦截功能
					其中再使用method.invoke(要增强/被代理的对象，args)
		
		基于子类的动态代理：需要第三方cglib的支持
16.什么是AOP?
	AOP就是面向切面编程，简单来说，就是将程序中重复代码提取出来，然后使用动态代理的方式对方法进行增强，统一使用重复的代码
	作用：不修改源码对已有方法进行增强
	优势：维护方便，提高开发效率，减少重复代码
	
	spring中的AOP是通过配置的方式来实现动态代理

17.spring中的AOP相关术语
	Joinpoint( 连接点):所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点，即指的是被代理对象的“所有方法”

	Pointcut( 切入点):所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义，即指的是被代理对象的“所有需要增强的方法”

	Advice( 通知/ 增强):所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知(整个Invoke方法执行就是环绕通知，环绕通知中一定会有切入点方法的调用)。

	Introduction( 引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。

	Target( 目标对象):代理的目标对象。
	
	Weaving( 织入):是指把增强应用到目标对象来创建新的代理对象的过程。

	spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。

	Proxy（代理）:一个类被 AOP 织入增强后，就产生一个结果代理类。

	Aspect(切面):是切入点和通知（引介）的结合。


18.spring中基于XML和注解的AOP配置
    <!-- spring中基于XML的AOP配置
        1.把通知Bean也交给spring来管理
        2.使用aop:config标签表明开始AOP的配置
        3.在aop:config标签内使用aop:aspect标签表示配置切面,id表示给切面提供一个唯一标识，ref指定通知类的id
        4.在aop:aspect标签内使用对应标签来配置通知类型：
            aop:before标签:表示配置前置通知
            aop:after-returning标签:表示配置后置通知
            aop:after-throwing标签:表示配置异常通知
            aop:after标签:表示配置最终通知
            aop:around标签:表示配置环绕通知
                method属性配置类中哪个方法作为前置通知，
                pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
	pointcut-ref属性：用于指定bean中的切入点表达式id，实现抽取重复的配置
                切入点表达式的写法：
                    关键字：execution(表达式)
                    表达式：
                        访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)
                    标准的表达式写法：
                        public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                    访问修饰符可以省略
                        void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                    返回值可以使用通配符，表示任意返回值
                        * com.itheima.service.impl.AccountServiceImpl.saveAccount()
                    包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.
                        * *.*.*.*.AccountServiceImpl.saveAccount())
                    包名可以使用..表示当前包及其子包
                        * *..AccountServiceImpl.saveAccount()
                    类名和方法名都可以使用*来实现通配
                        * *..*.*()
                    参数列表：
                        可以直接写数据类型：
                            基本类型直接写名称           int
                            引用类型写包名.类名的方式   java.lang.String
                        可以使用通配符表示任意类型，但是必须有参数
                        可以使用..表示有无参数均可，有参数可以是任意类型
                    全通配写法：
                        * *..*.*(..)
                    实际开发中切入点表达式的通常写法：
                        切到业务层实现类下的所有方法
                            * com.itheima.service.impl.*.*(..)

            aop:pointcut标签:配置切入点表达式，id属性表示切入点表达式的唯一标识，expression包括表达式内容，此标签可放在aop:aspect里面或者上面
    -->
  <!-- spring中基于注解的AOP配置
	需要在bean.xml使用<aop:aspectj-autoproxy></aop:aspectj-autoproxy>开启注解AOP
	@Aspect表示当前类是一个切面类
	@Before注解该方法为前置通知
	@After-Returning注解该方法为后置通知
	@After-Throwing注解该方法为异常通知
	@After注解该方法为最终通知
	@Around注解该方法为环绕通知
	以上括号中的参数为切入点表达式的方法名+()
	@Pointcut注解该方法为切入点表达式
  -->

19.spring中的JdbcTemplate
	JdbcTemplate作用：用于数据库交互，实现对表的CRUD操作：execute()方法(实现SQL语句)、update()方法(实现保存、更新、删除)，query()方法(实现查询操作，其中一个参数是新建一个对象，这个对象可以是要写一个拥有RowMapper接口的类，并用这个类实现mapRow方法，返回值为实体类对象，也可以是BeanPropertyRowMapper<T>(T.class)对象)
	spring中的内置数据源：DriverManagerDataSource
	
	注：在一个类中要使用JdbcTemplate可以通过继承JdbcDaoSupport类，避免重复代码，也可以自己编写一个类去继承

20.spring中的事务控制（需要导入spring-tx包）
	(1).基于XML的声明式事务控制：
		1.配置事务管理器：
			<bean id ="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="dataSource"></property>
			</bean>
		2.  配置事务通知(需要在bean.xml中导入事务的约束：tx的名称空间和约束)
			<tx:advice id="txAdvice" transaction-manager="transactionManager">
				        <!-- 配置事务的属性
                				isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。
                				propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS
                				read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。
                				timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。
               					rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。
                				no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚
        				        -->
        				<tx:attributes>
            					<tx:method name="*" propagation="REQUIRED" read-only="false"/>
            					<tx:method name="find*" propagation="SUPPORTS" read-only="true"></tx:method>
        				</tx:attributes>
			</tx:advice>
		3.配置AOP中的通用切入点表达式
			<aop:config>
				<aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"></aop:pointcut>
				<!--4.建立切入点表达式和事务通知的对应关系-->
				<aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>
			</aop:config>
		5.配置事务的属性(在tx:advice标签内配置)
	
	(2).基于注解的声明式事务控制
		1、配置事务管理器
			<bean id ="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="dataSource"></property>
			</bean>
        		2、开启spring对注解事务的支持
			<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>或者@EnableTransactionManagement
        		3、在需要事务支持的地方使用@Transactional注解

	(3).spring编程式事务控制