1.@SpringBootApplication 注解
	(1)查看源码可发现，@SpringBootApplication是一个复合注解，包含了@SpringBootConfiguration、@EnableAutoConfiguration，@ComponentScan这三个注解
	(2)这三个注解的作用分别为：
		1)@SpringBootConfiguration:标注当前类是配置类，这个注解继承自@Configuration。并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到srping容器中，并且实例名就是方法名
		2)@EnableAutoConfiguration:是自动配置的注解，这个注解会根据我们添加的组件jar来完成一些默认配置，我们做微服时会添加spring-boot-starter-web这个组件jar的pom依赖，这样配置会默认配置springmvc 和tomcat
		3)@ComponentScan:扫描当前包及其子包下被@Component，@Controller，@Service，@Repository注解标记的类并纳入到spring容器中进行管理。等价于<context:component-scan>的xml配置文件中的配置项
	(3)大多数情况下，这3个注解会被同时使用，基于最佳实践，这三个注解就被做了包装，成为了@SpringBootApplication注解。

2.@ServletComponentScan“Servlet、Filter、Listener 可以直接通过 @WebServlet、@WebFilter、@WebListener 注解自动注册，这样通过注解servlet ，拦截器，监听器的功能而无需其他配置，所以这次相中使用到了filter的实现，用到了这个注解。

3.@ConfigurationProperties：将yml或者properties文件中的内容绑定到相对应的属性类上

	@ConfigurationProperties和@Value区别：
		(1)松散绑定在@value 是被限制的，如果您确实想使用@Value，建议引用属性名（kebab case 只使用小写字母，既是羊肉串模式）。这允许 Spring Boot 使用与放松 binding@ConfigurationProperties 时相同的逻辑。例如，@Value（“${demo.item-price}）将匹配 demo.item-price 和 demo.itemPrice， 其他模式不能匹配。
		(2)元数据支持，我们在@ConfigurationProperties 方式可以生成元数据，目的是给我们提供提示和属性的描述。但是在@value 里面是没有的。@Value 适合单个的属性注入
		(3)spEL 在@ConfigurationProperties 中是不能支持的。在@Value 中可以支持
		(4)@Value 复杂类型不可注入，会有启动报错。
		(5)@Value不支持属性校验
		(6)@ConfigurationProperties多个属性绑定，@Value单个属性绑定

4.@EnableConfigurationProperties






